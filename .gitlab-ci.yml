# image: kontrapunkt/eci
# test:
#   stage: test
#   variables:
#     METFRAG_JAR: "/usr/local/bin/MetFragCommandLine-2.5.0.jar"
#   script:
#     - R CMD build . --no-build-vignettes --no-manual
#     - PKG_FILE_NAME=$(ls -1t *.tar.gz | head -n 1)
#     - R CMD check "${PKG_FILE_NAME}" --no-build-vignettes --no-manual
#     - R -e 'devtools::test()'


# build:
#   stage: build
#   only:
#     - tags
#   script:
#     - echo "Hello $CI_REGISTRY_IMAGE:`echo $CI_COMMIT_TAG|sed 's/^v\(.*\)/\1/'`"


image: docker:23.0.1
services:
  - docker:23.0.1-dind

stages:
  - build
  - test
  # - release
  # - deploy

variables:
  # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
  #DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_CERTDIR: "/certs"
  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
  #DOCKER_TLS_CERTDIR: ""

build:
  tags:
    - docker
    - $RUNNER_TAG
  stage: build
  before_script:
    # This did not work, so mounting authentication JSON on the side
    # of the runner.
    # - echo "$CI_REGISTRY_PASSWORD" | docker login "$CI_REGISTRY" --username "$CI_REGISTRY_USER" --password-stdin
  script:
    - docker build --pull -t $CONTAINER_TEST_IMAGE .
    - docker push $CONTAINER_TEST_IMAGE

    # - echo $CI_REGISTRY_IMAGE
    # - echo $CI_COMMIT_REF_SLUG
    # - echo $CI_COMMIT_TAG

test:
  tags:
    - docker
    - $RUNNER_TAG
  stage: test
  script:
    - docker pull $CONTAINER_TEST_IMAGE
    - docker run $CONTAINER_TEST_IMAGE test
    
# build:
#   stage: build
#   script:

# test1:
#   stage: test
#   script:
#     - docker pull $CONTAINER_TEST_IMAGE
#     - docker run $CONTAINER_TEST_IMAGE /script/to/run/tests

# test2:
#   stage: test
#   script:
#     - docker pull $CONTAINER_TEST_IMAGE
#     - docker run $CONTAINER_TEST_IMAGE /script/to/run/another/test

# release-image:
#   stage: release
#   script:
#     - docker pull $CONTAINER_TEST_IMAGE
#     - docker tag $CONTAINER_TEST_IMAGE $CONTAINER_RELEASE_IMAGE
#     - docker push $CONTAINER_RELEASE_IMAGE
#   only:
#     - main

# deploy:
#   stage: deploy
#   script:
#     - ./deploy.sh
#   only:
#     - main
#   environment: production
    
